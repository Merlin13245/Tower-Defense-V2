//Collections is used to check and sort for data, this is used primaraly for targeting.
import java.util.Collections;
//Math is used to convert intagers to floats, again for targeting.
import java.lang.Math.*;


//Objects
Plasma_Tower PlasmaTower1;
Target EasyTarget1;
Target EasyTarget2;

//These two arraylists keep track of all the targets x and y values, this is used for targeting.
ArrayList<Float> TargetsX = new ArrayList<Float>();
ArrayList<Float> TargetsY = new ArrayList<Float>();
   
int stage = 1;
int index = 0;

PVector VectorShot, VectorTarget;

PImage Stage1;

void setup(){
  
   size(1350,700);
   background(255);   
   
   rectMode(CENTER);
   ellipseMode(CENTER);
   
   PlasmaTower1 = new Plasma_Tower();
   EasyTarget1 = new Target();
   EasyTarget2 = new Target();  

   Stage1 = loadImage("Track 1.png");
   
   VectorShot = new PVector();
   VectorTarget = new PVector();
   
   EasyTarget1.startset(EasyTarget(),1);
   EasyTarget1.setTarget(-50,205);
   EasyTarget2.startset(EasyTarget(),1);
   EasyTarget2.setTarget(-200,205);
   
   TargetsX.add(EasyTarget1.getX());
   TargetsY.add(EasyTarget1.getY());
   TargetsX.add(EasyTarget2.getX());
   TargetsY.add(EasyTarget2.getY());
   
   VectorShot.x = -100;
   VectorShot.y = -100;

}

void draw(){
  background(255);
  image(Stage1,0,0);
  PlasmaTower1.DrawTower();
  PlasmaTower1.TowerShoot();
  PlasmaTower1.TargetSet(Math.round(getTargetX()),Math.round(getTargetY()));
  fill(150,0,0);  
  ellipse(EasyTarget1.getX(),EasyTarget1.getY(),30,30);
  ellipse(EasyTarget2.getX(),EasyTarget2.getY(),30,30);
  
  if(stage == 1){
    EasyTarget1.pathing(1);  
    EasyTarget2.pathing(1);
  }
  
  EasyTarget1.checkHealth();
  EasyTarget2.checkHealth();
  
}

float getTargetX(){
  float i = Collections.max(TargetsX);
  return i;
}

float getTargetY(){
  float b = Collections.max(TargetsY);
  return b;
}

void mousePressed(){
  PlasmaTower1.LocationSet();
}

class Target {
  float x;
  float y;
  int hitpoints;
  int type;
  int distance;
  
  void pathing(int Stage){
    if(Stage == 1){
      setTarget(Stage1pathX(x),Stage1pathY(x, y));
      Collections.sort(TargetsX);
      Collections.sort(TargetsY);
      TargetsX.add(1,x);
      TargetsY.add(1,y);
    } else {
      println("Could not find stage number for pathing");
    }
  }
  
  void setTarget(float X, float Y){
    x = X;
    y = Y;
  }
  
  void startset(int hits, int Type){
    hitpoints = hits;
    type = Type;
  }
  
  float getX(){
    return x;
  }
  
  float getY(){
    return y;
  }
  
  void hit(){
    hitpoints -= 1;
  }
  
  void distance(){
    distance++;
  }
  
  int getDistance(){
    return distance;
  }
  
  void checkHealth(){
    if(hitpoints == 0){
      if(type == 1){
        EasyTarget1.startset(EasyTarget(),1);
      }
      setTarget(-10,205);
    }
  }
}

class Plasma_Tower {

  int x = -100;
  int y = -100;
  float VectorShot_speed = 3.0f;
  
  void TowerShoot(){
    if(VectorShot.x != -100){
    PVector Target = PVector.sub(VectorTarget,VectorShot);
    Target.normalize();
    Target.mult(VectorShot_speed);
    VectorShot.add(Target);
    fill(0,0,200);
    stroke(100,0,200);
    ellipse(VectorShot.x,VectorShot.y,10,10);
    stroke(0);
    }
    if(VectorShot.x >= VectorTarget.x - 10 && VectorShot.y >= VectorTarget.y - 10 && VectorShot.x <= VectorTarget.x + 10 && VectorShot.y <= VectorTarget.y + 10){
      EasyTarget1.hit();
      VectorShot.set(x,y);
    }
  }
  
  void TargetSet(float x, float y){
    VectorTarget.set(x,y);
  }
  
  void LocationSet(){    
    x = mouseX;
    y = mouseY;
    VectorShot.set(x,y);
  }
  
  void DrawTower() {
    fill(100);
    rect(x,y,40,40);
    fill(200,0,0);
    ellipse(x,y,20,20);
    stroke(200,0,0);
    strokeWeight(3);
    line(x,y,x+20,y+20);
    line(x,y,x-20,y-20);
    line(x,y,x+20,y-20);
    line(x,y,x-20,y+20);
    stroke(0);
  }

}


int EasyTarget(){
   return 5; 
}

float Stage1pathX(float x){
  if(x <= 350){
    return(x + 1.30);
  } else if(x <= 665){
    return(x + 1);
  } else if(x <= 975){
   return(x + 1);
  } else {
   return(x + 1.30);
  }
}

float Stage1pathY(float x, float y){ 
  if(x <= 350){
    return(y);
  } else if(x <= 665){
    return(y + 0.60);
  } else if(x <= 975){
    return(y - 0.59);
  } else {
    return(y);
  }
}
