//Collections is used to manipulate data in order to make targeting easier
import java.util.Collections;

//Stage keeps track of what level the player is on, if 0 then main menu. This is also used for all kinds of other operations
int stage = 1;

//PImages are the backgrounds for each screen (main, stages, etc)
PImage Stage1;

//PVectors store the locations of all objects and shots
PVector PlasmaShot1, Target1;

//Creating objects
PlasmaTower PlasmaTower1;

void setup(){
  //This size is perfect for a full screen window on my laptop
  size(1350,700);
  
  //Setting the draw modes for easy shap drawing
  rectMode(CENTER);
  ellipseMode(CENTER);
  
  //Loading the background images, the file must be in the workspace of the project to properly load
  Stage1 = loadImage("Stage1.png");
  
  //Creating objects
  PlasmaTower1 = new PlasmaTower();
}

void draw(){

  //Setting the background based on what level the player is on.
  if(stage == 1){
    image(Stage1,0,0);
  }
  
  PlasmaTower1.drawTower();
  
}

//Method looks for a mouse press and performs functions based on where the mouse is.
void mousePressed(){
  PlasmaTower1.setLocation();
}

//Generic Target, can be set to any difficulty
class Target {

}

//Plasma Tower class, stores everything needed to create a plasma tower.
class PlasmaTower {

  //Floats that store the location of the tower, default is set to -100 -100 so that the tower does not show at the start of the game.
  float x = -100;
  float y = -100;
  
  //This method returns the x location of the tower, this is for the shot to use when reseting itself
  float getX(){
    return x;
  }
  
  //This method returns the x location of the tower, this is for the shot to use when reseting itself
  float getY(){
    return y;
  }
  
  //This functions sets the location of the tower, this has to be seperate so that the tower can continue to be drawn over the background
  void setLocation(){
  x = mouseX;
  y = mouseY;
  }
  
  //This function draws the tower at the x and y values
  void drawTower() {
    fill(175);
    rect(x,y,40,40);
    fill(200,0,0);
    ellipse(x,y,20,20);
    stroke(200,0,0);
    strokeWeight(3);
    line(x,y,x+20,y+20);
    line(x,y,x-20,y-20);
    line(x,y,x+20,y-20);
    line(x,y,x-20,y+20);
    stroke(0);
  }
  
}

//Class for the shots from the Plasma Tower, this is in its own class for easy referencing
class PlasmaShot {
   //Floats that store the location of the shot, default is set to -100 -100 so that the tower does not show at the start of the game.
   float x = -100;
   float y = -100;
   
   //This float stores the speed of the shot.
   float PlasmaShot_speed = 3.0f;
   
   //Method moves the shot toward that target.
   void shoot(){
     //This if statment check for if the shot has been moved from its orignal location, meaning the tower it is tied to has been moved. This will then allow the shot to start moving towards targets
     if(PlasmaShot1.x != -100){
       //New pvector calculates the path between the target and the shot, this does not tell where to move, only creates a path between the target and the shot.
       PVector Targeting = PVector.sub(Target1, PlasmaShot1);
       //This pvector function helps to make the shot appear as expected
       Targeting.normalize();
       //This pvector function changes the speed by the float created above
       Targeting.mult(PlasmaShot_speed);
       //This functions tell the shot which direction to go.
       PlasmaShot1.add(Targeting);
       
       //This draws the shot, see function below
       drawShot(PlasmaShot1.x, PlasmaShot1.y);
       
       //This if statement check for if the shot as hit a target
       if(PlasmaShot1.x >= PlasmaShot1.x - 10 && PlasmaShot1.y >= PlasmaShot1.y - 10 && PlasmaShot1.x <= PlasmaShot1.x + 10 && PlasmaShot1.y <= PlasmaShot1.y + 10){
         //Calls the hit function on the target
         
         //Reset the location of the shot back to -100 -100 so it does not shoot again unless called.
         PlasmaShot1.set(x,y);
       }
     }
   }
   
   void drawShot(float x, float y){
     fill(0,0,200);
     stroke(100,0,200);
     strokeWeight(2);
     ellipse(x,y,10,10);
   }
   
   
}
